When would you want to use a remote repository rather than keeping all your work
local?

    If a single person's work is being done on more than one machine, or several people are collaborating on a project, using a remote repository is appropriate

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Manual pulls give greater control over content.  For example, if content is being updated by several people, i might want to check with them before pulling content from GitHub.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Fork - copy a remote branch to another user remote branch.  Use this to create a GitHub repository potentially accessible by a group.

    Clone - copy a remote or local branch to a local branch.  

    Branch - a series of related commits.  Use this to create variations (such as new features) in applications.



What is the benefit of having a copy of the last known state of the remote
stored locally?

    Having a copy of the most recent remote would enable one to work with the remote repository's state while offline.


How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

It's possible that some analysis would be needed to determine what collaboration environment would be up to the task.
It's also possible the the project would not require the sophistication that Git offers.  

    Easier:  not having to master large set of features in the Git environment.

    Harder:  finding out the hard way that an adhoc/informal collaboration environment was an ineffective solution.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

Placing changes in branches other than master would be important in environments where activity is taking place
outside the main branch; examples would be testing and introducing new features.  Also, multiple branches is compatible
with environments having more than one author.

Having a single branch would might be sufficient for a low-activity single author environment.  
Its advantage consists of little need for and understanding of the myriad features in the Git tool.
